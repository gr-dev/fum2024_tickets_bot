# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  bot:
    build:
      context: .
    container_name: bot
    environment:
        BOT_TOKEN: "${BOT_TOKEN}"
        connection_string: "${connection_string}"
        admin_group: "${admin_group}"
        ENVIRONMENT: "${ENVIRONMENT}"
        PARTNER_EVENT_ID: "${PARTNER_EVENT_ID}"
        TZ: "Asia/Irkutsk"
        GOOGLESHEET: "${GOOGLESHEET}"
        GOOGLECREDENTIALS: "${GOOGLECREDENTIALS}"
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: .
    networks:
        - postgres
    restart: unless-stopped
  postgres:
    container_name: postgres #  https://habr.com/ru/articles/578744/
    image: postgres:15.6
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
      TZ: "Asia/Irkutsk"
    volumes:
      - db-data:/docker-entrypoint-initdb.d #scripts that will be run on start
      - initial-data:/var/lib/postgresql/data 
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - postgres
      
  pgadmin:
      container_name: pgadmin
      image: dpage/pgadmin4:8.4
      environment:
        PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
        PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
        PGADMIN_CONFIG_SERVER_MODE: "False"
        TZ: "Asia/Irkutsk"
      volumes:
        - pg-data:/var/lib/pgadmin
      ports:
        - "5050:80"
      restart: unless-stopped
      deploy:
        resources:
          limits:
            cpus: '0.5'
            memory: 1G
      networks:
        - postgres

volumes:
  db-data:
    external:
      name: ${dbVolumeName}
  initial-data:
  pg-data:
    external: 
      name: ${pgAdminVolumeName}

networks:
  postgres:
    driver: bridge

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

